# Caminho: docker/docker-compose.yml
services:
  server-gateway:
    build:
      context: ..
      dockerfile: dueling-gateway/Dockerfile
    container_name: server-gateway
    ports:
      - "8080:8080"
    environment:
      SERVER_PORT: 8080
      SERVER_NAME: server-gateway
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      server-1:
        condition: service_healthy
      server-2:
        condition: service_healthy
      server-3:
        condition: service_healthy
      server-4:
        condition: service_healthy
    networks:
      - dueling-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s

  server-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: >
      java 
      -Dredis.host=${REDIS_HOST} 
      -Dredis.port=${REDIS_PORT} 
      -jar app.jar 
      --spring.profiles.active=server,distributed,distributed-db
    container_name: server-1
    ports:
      - "8081:8080"
      - "7778:7778/udp"
    environment:
      SERVER_PORT: 8080
      SERVER_NAME: server-1
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
      - redis
    networks:
      - dueling-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s

  server-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: >
      java 
      -Dredis.host=${REDIS_HOST} 
      -Dredis.port=${REDIS_PORT} 
      -jar app.jar 
      --spring.profiles.active=server,distributed,distributed-db
    container_name: server-2
    ports:
      - "8082:8080"
    environment:
      SERVER_PORT: 8080
      SERVER_NAME: server-2
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
      - redis
    networks:
      - dueling-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s

  server-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: >
      java 
      -Dredis.host=${REDIS_HOST} 
      -Dredis.port=${REDIS_PORT} 
      -jar app.jar 
      --spring.profiles.active=server,distributed,distributed-db
    container_name: server-3
    ports:
      - "8083:8080"
    environment:
      SERVER_PORT: 8080
      SERVER_NAME: server-3
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
      - redis
    networks:
      - dueling-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s
  
  server-4:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: >
      java 
      -Dredis.host=${REDIS_HOST} 
      -Dredis.port=${REDIS_PORT} 
      -jar app.jar 
      --spring.profiles.active=server,distributed,distributed-db
    container_name: server-4
    ports:
      - "8084:8080"
    environment:
      SERVER_PORT: 8080
      SERVER_NAME: server-4
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
      - redis
    networks:
      - dueling-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s

  client-1:
    build:
      context: ..
      dockerfile: dueling-client/Dockerfile
    depends_on:
      server-gateway:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo 'Waiting for gateway server to be ready...'
      until curl -f http://$GATEWAY_HOST:$GATEWAY_PORT/actuator/health >/dev/null 2>&1; do
        echo 'Actuator health not ready yet, waiting...'
        sleep 2
      done
      echo 'Gateway is ready, starting client...'
      java -jar app.jar
    environment:
      - GATEWAY_HOST=server-gateway
      - GATEWAY_PORT=8080
      - DOCKER_ENV=true
      - CLIENT_USERNAME=client1
      - CLIENT_PASSWORD=password1
    networks:
      - dueling-network

  client-2:
    build:
      context: ..
      dockerfile: dueling-client/Dockerfile
    depends_on:
      server-gateway:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo 'Waiting for gateway server to be ready...'
      until curl -f http://$GATEWAY_HOST:$GATEWAY_PORT/actuator/health >/dev/null 2>&1; do
        echo 'Actuator health not ready yet, waiting...'
        sleep 2
      done
      echo 'Gateway is ready, starting client...'
      java -jar app.jar
    environment:
      - GATEWAY_HOST=server-gateway
      - GATEWAY_PORT=8080
      - DOCKER_ENV=true
      - CLIENT_USERNAME=client2
      - CLIENT_PASSWORD=password2
    networks:
      - dueling-network

  client-3:
    build:
      context: ..
      dockerfile: dueling-client/Dockerfile
    depends_on:
      server-gateway:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo 'Waiting for gateway server to be ready...'
      until curl -f http://$GATEWAY_HOST:$GATEWAY_PORT/actuator/health >/dev/null 2>&1; do
        echo 'Actuator health not ready yet, waiting...'
        sleep 2
      done
      echo 'Gateway is ready, starting client...'
      java -jar app.jar
    environment:
      - GATEWAY_HOST=server-gateway
      - GATEWAY_PORT=8080
      - DOCKER_ENV=true
      - CLIENT_USERNAME=client3
      - CLIENT_PASSWORD=password3
    networks:
      - dueling-network

  client-4:
    build:
      context: ..
      dockerfile: dueling-client/Dockerfile
    depends_on:
      server-gateway:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo 'Waiting for gateway server to be ready...'
      until curl -f http://$GATEWAY_HOST:$GATEWAY_PORT/actuator/health >/dev/null 2>&1; do
        echo 'Actuator health not ready yet, waiting...'
        sleep 2
      done
      echo 'Gateway is ready, starting client...'
      java -jar app.jar
    environment:
      - GATEWAY_HOST=server-gateway
      - GATEWAY_PORT=8080
      - DOCKER_ENV=true
      - CLIENT_USERNAME=client4
      - CLIENT_PASSWORD=password4
    networks:
      - dueling-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - dueling-network
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 5s
        timeout: 2s
        retries: 5

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./init-test-data.sql:/docker-entrypoint-initdb.d/99-init-test-data.sql
    networks:
      - dueling-network
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 10s
        timeout: 5s
        retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - dueling-network
    depends_on:
      server-1:
        condition: service_healthy
      server-2:
        condition: service_healthy
      server-3:
        condition: service_healthy
      server-4:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - dueling-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  grafana_data:

networks:
  dueling-network:
    driver: bridge