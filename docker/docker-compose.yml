
services:
  server-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: java -jar app.jar --spring.profiles.active=server,distributed,distributed-db
    container_name: server-1
    ports:
      - "8081:8080"
      - "7778:7778/udp"
    environment:
      - SERVER_PORT=8080
      - SERVER_NAME=server-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=dueling_db
      - POSTGRES_USER=dueling_user
      - POSTGRES_PASSWORD=dueling_password
    depends_on:
      - postgres
    networks:
      - dueling-network

  server-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: java -jar app.jar --spring.profiles.active=server,distributed,distributed-db
    container_name: server-2
    ports:
      - "8082:8080"
    environment:
      SERVER_PORT: 8080
      SERVER_NAME: server-2
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    networks:
      - dueling-network

  server-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    command: java -jar app.jar --spring.profiles.active=server,distributed,distributed-db
    container_name: server-3
    ports:
      - "8083:8080"
    environment:
      SERVER_PORT: 8080
      SERVER_NAME: server-3
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    networks:
      - dueling-network

  client-1:
    build:
      context: ..
      dockerfile: dueling-client/Dockerfile
    command: autobot
    depends_on:
      - server-1
      - server-2
    environment:
      - GATEWAY_HOST=server-1
      - GATEWAY_PORT=8080
    networks:
      - dueling-network

  client-2:
    build:
      context: ..
      dockerfile: dueling-client/Dockerfile
    command: autobot
    depends_on:
      server-1:
        condition: service_healthy
      server-2:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - GATEWAY_HOST=server-2
      - GATEWAY_PORT=8080
    networks:
      - dueling-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - dueling-network

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=dueling_db
      - POSTGRES_USER=dueling_user
      - POSTGRES_PASSWORD=dueling_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dueling-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - dueling-network
    depends_on:
      server-1:
        condition: service_healthy
      server-2:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - dueling-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  grafana_data:

networks:
  dueling-network:
    driver: bridge
